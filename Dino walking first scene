/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include<stdio.h>
#include <string.h>
//frame counter
int frame = 0, scene_counter = 1;

//sun scene 1
float scale_sunx = 1, scale_suny = 1, sun_count;

//cloud left and right scene 1
float slide_cloudL, slide_cloudR, move_cloud, count_cloud;

//dino animation scene 1
float dino_movex, dino_movey, dino_count, dino_slidex, dino_slidey, dinoR_lost, dinoL_lost;

//dino legs scene 1
float dinolegL_angle = 0, dinolegR_angle = 0, dinoleg_angle_move, dinoleg_move_x, dinoleg_move_y, dinoleg_count = 0, dinoR_leg_lost, dinoL_leg_lost;

//man leg scene 2
float manlegL_angle = 0, manlegR_angle = 0, manleg_angle_move, manleg_move_x, manleg_move_y, manleg_count = 0, manR_leg_lost, manL_leg_lost;

//man arms scene 2
float manarmL_angle = 0, manarmR_angle = 0, manarm_angle_move, manarm_move_x, manarm_move_y, manarm_count = 0, manR_arm_lost, manL_arm_lost;

//man animation scene 2
float man_movex, man_movey, man_count = 0, man_slidex, man_slidey, manR_lost, manL_lost;

//dino animation for scene 3
float dinoRight_movex, dinoRight_movey, dinoRight_count, dinoRight_slidex, dinoRight_slidey, dinoRRight_lost, dinoLRight_lost;

//dino legs for scene 3
float dinolegRightL_angle = 0, dinolegRightR_angle = 0, dinoRightleg_angle_move, dinoRightleg_move_x, dinoRightleg_move_y, dinoRightleg_count = 0, dinoRightR_leg_lost, dinoRightL_leg_lost;

//man leg for scene 3
float manRightLegL_angle = 0, manRightLegR_angle = 0, manRightLeg_angle_move, manRightLeg_move_x, manRightLeg_move_y, manRightLeg_count = 0, manRightR_leg_lost, manRightL_leg_lost;

//man arms for scene 3
float manRightarmL_angle = 0, manRightarmR_angle = 0, manRightarm_angle_move, manRightarm_move_x, manRightarm_move_y, manRightarm_count = 0, manRightR_arm_lost, manRightL_arm_lost;

//man animation for scene 3
float manRight_movex, manRight_movey, manRight_count = 0, manRight_slidex, manRight_slidey, manRightR_lost, manRightL_lost;

//dino for scene 4
float dinoRight_movex4, dinoRight_movey4, dinoRight_count4, dinoRight_slidex4, dinoRight_slidey4, dinoRRight_lost4, dinoLRight_lost4;

//dino legs for scene 4
float dinolegRightL_angle4 = 0, dinolegRightR_angle4 = 0, dinoRightleg_angle_move4, dinoRightleg_move_x4, dinoRightleg_move_y4, dinoRightleg_count4 = 0, dinoRightR_leg_lost4, dinoRightL_leg_lost4;

//man leg for scene 4
float manRightLegL_angle4 = 0, manRightLegR_angle4 = 0, manRightLeg_angle_move4, manRightLeg_move_x4, manRightLeg_move_y4, manRightLeg_count4 = 0, manRightR_leg_lost4, manRightL_leg_lost4;

//man arms for scene 4
float manRightarmL_angle4 = 0, manRightarmR_angle4 = 0, manRightarm_angle_move4, manRightarm_move_x4, manRightarm_move_y4, manRightarm_count4 = 0, manRightR_arm_lost4, manRightL_arm_lost4;

//man animation for scene 4
float manRight_movex4, manRight_movey4, manRight_count4 = 0, manRight_slidex4, manRight_slidey4, manRightR_lost4, manRightL_lost4;

float fadex, fademove;

//man zoom animation scene 5
float manScalex = 1.0, manScaley = 1.0, moveScaleMan, scaleManCount = 0, moveScaleManLost;
//dino zoom animation scene 5
float dinoScalex = 1.0, dinoScaley = 1.0, moveScaleDino, scaleDinoCount = 0, moveScaleDinoLost;

//ending animation
//dino animation scene 1
float dino_movex5, dino_movey5, dino_count5, dino_slidex5, dino_slidey5, dinoR_lost5, dinoL_lost5;

//dino legs scene 1
float dinolegL_angle5 = 0, dinolegR_angle5 = 0, dinoleg_angle_move5, dinoleg_move_x5, dinoleg_move_y5, dinoleg_count5 = 0, dinoR_leg_lost5, dinoL_leg_lost5;

bool isRunning = true;
void dinoLeft();
void scene1();
void scene1_animation();
void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 600, 0, 500);
	glMatrixMode(GL_MODELVIEW);
}

/*void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	//dinoLeft();
	//scene1();
	scene1_animation();
	glutSwapBuffers();

	}*/

void drawCircle(int r, int  xc, int yc) {
	int x = 0, y = r;
	int d;
	d = 1 - r;

	while (x < y)
	{
		glBegin(GL_POLYGON);
		glVertex2i(y + xc, x + yc);
		glVertex2i(x + xc, y + yc);
		glVertex2i(x + xc, -y + yc);
		glVertex2i(y + xc, -x + yc);
		glVertex2i(-y + xc, -x + yc);
		glVertex2i(-x + xc, -y + yc);
		glVertex2i(-x + xc, y + yc);
		glVertex2i(-y + xc, x + yc);
		glEnd();

		if (d < 0)
		{
			x = x + 1;
			d = d + 2 * x + 1;
		}
		else
		{
			x = x + 1;
			y = y - 1;
			d = d + ((2 * x) + 1) - (2 * y);
		}
	}//end while
}//end drawCircle
void drawEllipse(int rx, int ry, int xc, int yc) {
	float a = rx;
	float b = ry;
	float x = 0;
	float y = ry;
	float d2;
	float d1 = b - (a*a*ry) + (a*a*0.25);

	while (2 * b*b*x < 2 * a*a*y)
	{
		glBegin(GL_POLYGON);
		glVertex2f(x + xc, y + yc);
		glVertex2f(x + xc, -y + yc);
		glVertex2f(-x + xc, -y + yc);
		glVertex2f(-x + xc, y + yc);
		glEnd();

		if (d1 < 0)
		{
			x = x + 1;
			d1 = d1 + (2 * b*b*x) + (b*b);
		}
		else
		{
			x = x + 1;
			y = y - 1;
			d1 = d1 + (2 * b*b*x) - (2 * a*a*y) + (b*b);
		}
	}//end while

	d2 = b*b*((x + 0.5)*(x + 0.5)) + (a*a*((y - 1)*(y - 1))) - (a*a*b*b);
	while (y > 0 || y < 0)
	{
		glBegin(GL_POLYGON);
		glVertex2f(x + xc, y + yc);
		glVertex2f(x + xc, -y + yc);
		glVertex2f(-x + xc, -y + yc);
		glVertex2f(-x + xc, y + yc);
		glEnd();

		if (d2 > 0)
		{
			y = y - 1;
			d2 = d2 - (2 * a*a*y) + (a*a);
		}
		else
		{
			x = x + 1; y = y - 1;
			d2 = d2 + (2 * b*b*x) - (2 * a*a*y) + (a*a);
		}
	}
}
void dinoLeft_LeftArm() {
	glColor3f(0.666, 0.266, 0);
	drawEllipse(10, 10, 260, 250);
	glBegin(GL_POLYGON);
	glVertex2f(260, 250);
	glVertex2f(270, 250);
	glVertex2f(280, 240);
	glVertex2f(290, 240);
	glVertex2f(290, 230);
	glVertex2f(270, 230);
	glVertex2f(260, 240);
	glVertex2f(260, 250);
	glEnd();

	drawEllipse(10, 10, 290, 235);

	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(295, 230);
	glVertex2f(300, 225);
	glVertex2f(295, 220);
	glVertex2f(295, 225);
	glVertex2f(290, 225);
	glVertex2f(290, 230);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(300, 235);
	glVertex2f(305, 230);
	glVertex2f(300, 225);
	glVertex2f(300, 230);
	glVertex2f(295, 230);
	glVertex2f(295, 235);
	glEnd();
}

void dinoLeft_RightArm() {
	glColor3f(0.0, 0.0, 0);
	drawEllipse(10, 10, 270, 250);
	glBegin(GL_POLYGON);
	glVertex2f(270, 250);
	glVertex2f(280, 250);
	glVertex2f(290, 240);
	glVertex2f(300, 240);
	glVertex2f(300, 230);
	glVertex2f(280, 230);
	glVertex2f(270, 240);
	glVertex2f(270, 250);
	glEnd();

	drawEllipse(10, 10, 300, 235);

	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(305, 230);
	glVertex2f(310, 225);
	glVertex2f(305, 220);
	glVertex2f(305, 225);
	glVertex2f(300, 225);
	glVertex2f(300, 230);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(310, 235);
	glVertex2f(315, 230);
	glVertex2f(310, 225);
	glVertex2f(310, 230);
	glVertex2f(305, 230);
	glVertex2f(305, 235);
	glEnd();
}

void dinoLeft_HeadAndNeck() {

	glBegin(GL_POLYGON);
	glColor3f(0.666, 0.266, 0);
	glVertex2f(300, 350);
	glVertex2f(350, 340);
	glVertex2f(360, 330);
	glVertex2f(360, 320);
	glVertex2f(350, 320);
	glVertex2f(320, 310);
	glVertex2f(340, 310);
	glVertex2f(360, 310);
	glVertex2f(350, 300);
	glVertex2f(360, 310);
	glVertex2f(310, 290);
	glVertex2f(300, 300);
	glVertex2f(300, 290);
	glVertex2f(270, 245);
	glVertex2f(270, 300);
	glVertex2f(300, 350);
	glEnd();

	drawEllipse(10, 30, 270, 270);

	glColor3f(255.0, 255.0, 255.0);
	drawCircle(5, 310, 340);

	glPointSize(5.0);
	glBegin(GL_POINTS);
	glColor3f(0.0, 0.0, 0.0);
	glVertex2f(310, 340);
	glEnd();
}

void dinoLeft_Body() {
	glBegin(GL_POLYGON);
	glColor3f(0.501, 0.2, 0);
	glVertex2f(270, 300);
	glVertex2f(270, 240);
	glVertex2f(250, 230);
	glVertex2f(160, 250);
	glVertex2f(180, 310);
	glVertex2f(260, 310);
	glVertex2f(270, 300);
	glEnd();
}

void dinoLeft_Tail() {
	glBegin(GL_POLYGON);
	glColor3f(0.501, 0.2, 0);
	glVertex2f(30, 300);
	glVertex2f(150, 300);
	glVertex2f(180, 310);
	glVertex2f(160, 250);
	glVertex2f(150, 250);
	glVertex2f(150, 270);
	glVertex2f(30, 300);
	glEnd();
}

void dinoLeft_LegLeft() {
	glColor3f(0.666, 0.266, 0);
	drawEllipse(30, 30, 195, 250);

	glBegin(GL_POLYGON);
	//glColor3f(0.0, 0.0, 0);
	glVertex2f(225, 245);
	glVertex2f(200, 200);
	glVertex2f(170, 200);
	glVertex2f(190, 245);
	glVertex2f(180, 180);
	glVertex2f(170, 180);
	glVertex2f(170, 160);
	glVertex2f(170, 200);
	glEnd();

	drawEllipse(15, 10, 185, 165);

	//Feet Claws
	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(200, 160);
	glVertex2f(195, 165);
	glVertex2f(190, 165);
	glVertex2f(190, 160);
	glVertex2f(200, 160);
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(205, 165);
	glVertex2f(200, 170);
	glVertex2f(195, 170);
	glVertex2f(195, 165);
	glVertex2f(205, 165);
	glEnd();
}

void dinoLeft_LegRight() {
	glColor3f(0.0, 0.0, 0.0);
	drawEllipse(30, 30, 205, 250);

	glBegin(GL_POLYGON);
	//glColor3f(0.0, 0.0, 0);
	glVertex2f(235, 245);
	glVertex2f(210, 200);
	glVertex2f(180, 200);
	glVertex2f(200, 245);
	glVertex2f(190, 180);
	glVertex2f(180, 180);
	glVertex2f(180, 160);
	glVertex2f(180, 200);
	glVertex2f(235, 245);
	glEnd();

	drawEllipse(15, 10, 195, 165);

	//Feet Claws
	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(210, 160);
	glVertex2f(205, 165);
	glVertex2f(200, 165);
	glVertex2f(200, 160);
	glVertex2f(210, 160);
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0);
	glVertex2f(215, 165);
	glVertex2f(210, 170);
	glVertex2f(200, 170);
	glVertex2f(200, 165);
	glVertex2f(210, 165);
	glEnd();
}




///////////////////////////scene1//////////////////////////



void mountains() {
	glColor3f(0.502, 0.502, 0.000);
	glBegin(GL_TRIANGLES);
	glVertex2i(50, 230);
	glVertex2i(150, 430);
	glVertex2i(250, 230);
	glEnd();

	glColor3f(0.420, 0.557, 0.137);
	glBegin(GL_TRIANGLES);
	glVertex2i(100, 230);
	glVertex2i(200, 430);
	glVertex2i(300, 230);
	glEnd();
}

void sky() {

	//sky
	glColor3f(0.529, 0.808, 0.922);
	glBegin(GL_QUADS);
	glVertex2i(0, 300);
	glVertex2i(0, 500);
	glVertex2i(750, 500);
	glVertex2i(750, 300);
	glEnd();

}

void cloudLeft() {
	//cloud left
	glColor3f(1.000, 1.000, 1.000);
	drawCircle(30, 100, 400);
	drawCircle(30, 130, 430);
	drawCircle(30, 160, 430);
	drawCircle(30, 190, 400);
	drawCircle(30, 150, 400);
}

void cloudRight() {
	//cloud right
	glColor3f(1.000, 1.000, 1.000);
	drawCircle(30, 400, 400);
	drawCircle(30, 430, 430);
	drawCircle(30, 460, 430);
	drawCircle(30, 490, 400);
	drawCircle(30, 450, 400);
}

void sun() {
	//sun
	glColor3f(1.000, 1.000, 0.000);
	drawEllipse(40, 50, 370, 420);
}

void ground() {
	//grass
	glColor3f(0.196, 0.804, 0.196);
	glBegin(GL_QUADS);
	glVertex2i(0, 300);
	glVertex2i(0, 100);
	glVertex2i(750, 100);
	glVertex2i(750, 300);
	glEnd();

	//trees
	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(300, 250);
	glVertex2i(300, 310);
	glVertex2i(310, 310);
	glVertex2i(310, 250);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 290, 310);
	drawCircle(15, 300, 320);
	drawCircle(15, 310, 320);
	drawCircle(15, 300, 310);

	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(310, 270);
	glVertex2i(310, 330);
	glVertex2i(320, 330);
	glVertex2i(320, 270);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 300, 330);
	drawCircle(15, 310, 340);
	drawCircle(15, 320, 340);
	drawCircle(15, 310, 330);

	//trees 2
	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(320, 260);
	glVertex2i(320, 320);
	glVertex2i(330, 320);
	glVertex2i(330, 260);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 310, 320);
	drawCircle(15, 320, 330);
	drawCircle(15, 330, 330);
	drawCircle(15, 320, 320);


	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(340, 260);
	glVertex2i(340, 320);
	glVertex2i(350, 320);
	glVertex2i(350, 260);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 330, 320);
	drawCircle(15, 340, 330);
	drawCircle(15, 350, 330);
	drawCircle(15, 340, 320);

	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(100 - 50, 260);
	glVertex2i(100 - 50, 320);
	glVertex2i(110 - 50, 320);
	glVertex2i(110 - 50, 260);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 100 - 50, 320);
	drawCircle(15, 110 - 50, 330);
	drawCircle(15, 120 - 50, 330);
	drawCircle(15, 110 - 50, 320);
	glColor3f(0.545, 0.271, 0.075);
	glBegin(GL_QUADS);
	glVertex2i(120 - 50, 260);
	glVertex2i(120 - 50, 320);
	glVertex2i(130 - 50, 320);
	glVertex2i(130 - 50, 260);
	glEnd();
	glColor3f(0.196, 0.804, 0.196);
	drawCircle(15, 120 - 50, 320);
	drawCircle(15, 130 - 50, 330);
	drawCircle(15, 140 - 50, 330);
	drawCircle(15, 130 - 50, 320);

	//river
	glColor3f(0.255, 0.412, 0.88);
	glBegin(GL_QUADS);
	glVertex2i(0, 0);
	glVertex2i(0, 100);
	glVertex2i(750, 100);
	glVertex2i(750, 0);
	glEnd();

}


void scene1_sun_idle()
{
	if (scale_sunx > 0.8 && scale_suny > 0.8) {


			sun_count = 0;

	}
	if (sun_count == 0) {
		scale_sunx *= 0.99; scale_suny *= 0.99;
		if (scale_sunx == 0.8 && scale_suny == 0.8) {
			sun_count = 1;
		}
	}
	if (scale_sunx < 1 && scale_suny < 1) {
		sun_count = 1;
	}
	if (sun_count == 1) {
		scale_sunx *= 1.01; scale_suny *= 1.01;
		if (scale_sunx == 1.01 && scale_suny == 1.01) {
			sun_count = 0;
		}
	}
	glutPostRedisplay();
}//end sunidle

void scene1_sun_animation()
{
	glPushMatrix();
	glTranslatef(370 * (1 - scale_sunx), 420 * (1 - scale_suny), 0.0);
	glScalef(scale_sunx, scale_suny, 1.0);
	sun();
	glPopMatrix();
}//end

void scene1_cloudL_idle() {

	if (slide_cloudL < 1000) { move_cloud = 0; }
	if (move_cloud == 0) { slide_cloudL += 0.05; }
	glutPostRedisplay();
}

void scene1_cloudR_idle() {
	if (slide_cloudR > 0) { move_cloud = 0; }
	if (move_cloud == 0) { slide_cloudR -= 0.05; }
	glutPostRedisplay();
}

void scene1_cloudL_animation() {
	glPushMatrix();

		glTranslatef(slide_cloudL, 0, 0);
		cloudLeft();

	glPopMatrix();

}
void scene1_cloudR_animation() {
	glPushMatrix();

	glTranslatef(slide_cloudR, 0, 0);
	cloudRight();

	glPopMatrix();

}

void scene1_dino_idle() {
	//idle
	if (dino_slidey > 0) dino_movey = 1;
	if (dino_movey == 1) dino_slidey -= 0.5;//1
	if (dino_slidey < -20) dino_movey = 0;
	if (dino_movey == 0) dino_slidey += 0.5;//1

	if (dino_slidex < 1000) { dino_movex = 0; dino_count = 0; dinoleg_count = 0; }
	//if (dino_movex == 1) dino_slidex -= 1;//4
	//if (dino_slidex < -1600) dino_movex = 0;
	if (dino_movex == 0) dino_slidex += 0.5;//4

	if (dino_count == 0) {
		dinoR_lost = 1; dinoL_lost = 0;
	}
	else {
		dinoR_lost = 0; dinoL_lost = 0;
	}
	glutPostRedisplay();
}



void scene1_dinoLleg_idle() {

	if (dinolegL_angle > 30)  dinoleg_angle_move = 0;
	if (dinoleg_angle_move == 0)  dinolegL_angle -= 0.8;
	if (dinolegL_angle < -30)  dinoleg_angle_move = 1;
	if (dinoleg_angle_move == 1)  dinolegL_angle += 0.8;

	if (dinoleg_count == 0) {
		dinoR_leg_lost = 1; dinoL_leg_lost = 0;
	}
	else {
		dinoR_leg_lost = 0; dinoL_leg_lost = 0;
	}
	glutPostRedisplay();
}

void scene1_dinoRleg_idle() {

	if (dinolegR_angle > 30)  dinoleg_angle_move = 1;
	if (dinoleg_angle_move == 0)  dinolegR_angle += 0.8;
	if (dinolegR_angle < -30)  dinoleg_angle_move = 0;
	if (dinoleg_angle_move == 1)  dinolegR_angle -= 0.8;

	if (dinoleg_count == 0) {
		dinoR_leg_lost = 1; dinoL_leg_lost =0;
	}
	else {
		dinoR_leg_lost = 0; dinoL_leg_lost = 0;
	}
	glutPostRedisplay();
}

void scene1_dino_animation() {
	//moving to the right
	glPushMatrix();
	if (dino_count == 0)
		glTranslatef(dino_slidex, dino_slidey, 0);
	glTranslatef(0, 125, 0);
	glScalef(0.6, 0.6, 1);

	glScalef(dinoR_lost, dinoR_lost, 0);
	dinoLeft_Tail();
	dinoLeft_RightArm();
	dinoLeft_Body();
	dinoLeft_HeadAndNeck();
	dinoLeft_LeftArm();
	glPopMatrix();
}

void scene1_dinoLleg_animation() {
	glPushMatrix();
	if (dinoleg_count == 0) {
		glTranslatef(dino_slidex - 80, dino_slidey + 10, 0);
		glTranslatef(200, 290, 0);
		glScalef(0.6, 0.6, 1);
		glRotatef(dinolegL_angle, 0, 0, 1);
		glTranslatef(-200, -290, 0);
	}
	//pupil

	glScalef(dinoR_leg_lost, dinoR_leg_lost, 0);
	dinoLeft_LegLeft();
	glPopMatrix();
}

void scene1_dinoRleg_animation() {
	glPushMatrix();
	if (dinoleg_count == 0) {
		glTranslatef(dino_slidex - 80, dino_slidey + 10, 0);
		glTranslatef(200, 290, 0);
		glScalef(0.6, 0.6, 1);
		glRotatef(dinolegR_angle, 0, 0, 1);
		glTranslatef(-200, -290, 0);
	}
	glScalef(dinoR_leg_lost, dinoR_leg_lost, 0);
	dinoLeft_LegRight();
	glPopMatrix();
}

void scene1_idle() {
	scene1_sun_idle();
	scene1_cloudL_idle();
	scene1_cloudR_idle();
	scene1_dino_idle();
	scene1_dinoRleg_idle();
	scene1_dinoLleg_idle();
}

void scene1_animation() {
	scene1_sun_animation();
	scene1_cloudL_animation();
	scene1_cloudR_animation();
	scene1_dinoRleg_animation();
	scene1_dino_animation();
	scene1_dinoLleg_animation();
}


void scene1() {               //scene 1
	sun();
	sky();
	ground();
	mountains();
}

void dinoLeft() {             //trex body
    printf("\n enter \n");

	dinoLeft_Tail();
	dinoLeft_LegRight();
	dinoLeft_RightArm();
	dinoLeft_Body();
	dinoLeft_HeadAndNeck();
	dinoLeft_LegLeft();
	dinoLeft_LeftArm();
}


void Timer(int value) {
	if (value)glutPostRedisplay();
	glutTimerFunc(300, Timer, value);
}

void renderSpacedBitmapString(float x, float y, void *font, char *string) {
	char *c;
	int x1 = x;
	for (c = string; *c != '\0'; c++) {
		glRasterPos2f(x1, y);
		glutBitmapCharacter(font, *c);
		x1 = x1 + glutBitmapWidth(font, *c);
	}
}

void animate() {

	if (scene_counter == 2)
		scene1_animation();
}

void scene_idle() {

	if (scene_counter == 2)
		scene1_idle();
}
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	////Animation happens here
	frame=50;
	if (isRunning) {
		scene_idle();
	}

	printf("%d\n", frame);
	if (frame >= 0 && frame < 50) {
		scene_counter = 1;
	}else if (frame >= 50 && frame < 1000) { scene_counter = 2; }
	else if (frame >= 1000 && frame < 2000) { scene_counter = 3; }
	else if (frame >= 2000 && frame < 2700) { scene_counter = 4; }
	else if (frame >= 2700 && frame < 3100) { scene_counter = 5; }
	else if (frame >= 3100 && frame < 4000) { scene_counter = 6; }
	else if (frame >= 4000 && frame < 4700) { scene_counter = 7; }


	if (scene_counter == 2) {
		scene1();
		glColor3f(0.0,0.0,0.0);

	}
	animate();
	if (frame > 4700 ) {
		frame = 0;
		isRunning = false;
	}
	glutSwapBuffers();
	glFlush();
}

void Visibility(GLint state) {
	switch (state) {
	case GLUT_VISIBLE:
		Timer(1);
		break;
	case GLUT_NOT_VISIBLE:
		Timer(0);
		break;
	default:
		break;
	}
}


int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(1300, 800);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("The Hungry T-Rex the Movie Trailer");
	init();
	glutDisplayFunc(display);
	glutTimerFunc(0, Timer, 0);
	glutVisibilityFunc(Visibility);

	glutMainLoop();
	return 0;
}
